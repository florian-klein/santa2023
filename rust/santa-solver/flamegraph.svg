<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="10000" height="790" onload="init(evt)" viewBox="0 0 10000 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="9990" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="9990" y="773.00"> </text><svg id="frames" x="10" width="9980" total_samples="2457"><g><title>ctrl-c (1 samples, 0.04%)</title><rect x="0.0000%" y="725" width="0.0407%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.0300%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="709" width="0.0407%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.0300%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="693" width="0.0407%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.0300%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="677" width="0.0407%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.0300%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="661" width="0.0407%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.0300%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="645" width="0.0407%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.0300%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="629" width="0.0407%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.0300%" y="639.50"></text></g><g><title>perf-exec (5 samples, 0.20%)</title><rect x="0.0407%" y="725" width="0.2035%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="5"/><text x="0.0707%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="709" width="0.2035%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="5"/><text x="0.0707%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="693" width="0.2035%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="5"/><text x="0.0707%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="677" width="0.2035%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="5"/><text x="0.0707%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="661" width="0.2035%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="5"/><text x="0.0707%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="645" width="0.2035%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="5"/><text x="0.0707%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="629" width="0.2035%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="5"/><text x="0.0707%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="613" width="0.2035%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="5"/><text x="0.0707%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="597" width="0.2035%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="5"/><text x="0.0707%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="581" width="0.2035%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="5"/><text x="0.0707%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="565" width="0.2035%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="5"/><text x="0.0707%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="549" width="0.2035%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="5"/><text x="0.0707%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="0.0407%" y="533" width="0.2035%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="5"/><text x="0.0707%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="0.0814%" y="517" width="0.1628%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="4"/><text x="0.1114%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="0.0814%" y="501" width="0.1628%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="4"/><text x="0.1114%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="0.0814%" y="485" width="0.1628%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="4"/><text x="0.1114%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="0.0814%" y="469" width="0.1628%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="4"/><text x="0.1114%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="0.0814%" y="453" width="0.1628%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="4"/><text x="0.1114%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="0.0814%" y="437" width="0.1628%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="4"/><text x="0.1114%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="0.0814%" y="421" width="0.1628%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="4"/><text x="0.1114%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="0.0814%" y="405" width="0.1628%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="4"/><text x="0.1114%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="0.0814%" y="389" width="0.1628%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="4"/><text x="0.1114%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.16%)</title><rect x="0.2442%" y="693" width="0.1628%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="4"/><text x="0.2742%" y="703.50"></text></g><g><title>&lt;santa_solver::groups::PermutationGroupIterator as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="0.4070%" y="693" width="0.0407%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="0.4370%" y="703.50"></text></g><g><title>__GI___libc_free (9 samples, 0.37%)</title><rect x="0.4477%" y="693" width="0.3663%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="9"/><text x="0.4777%" y="703.50">__G..</text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="1.2210%" y="677" width="0.0407%" height="15" fill="rgb(213,181,19)" fg:x="30" fg:w="1"/><text x="1.2510%" y="687.50"></text></g><g><title>checked_request2size (5 samples, 0.20%)</title><rect x="1.2617%" y="677" width="0.2035%" height="15" fill="rgb(254,191,54)" fg:x="31" fg:w="5"/><text x="1.2917%" y="687.50"></text></g><g><title>malloc_consolidate (1 samples, 0.04%)</title><rect x="1.4652%" y="677" width="0.0407%" height="15" fill="rgb(241,83,37)" fg:x="36" fg:w="1"/><text x="1.4952%" y="687.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.81%)</title><rect x="0.8140%" y="693" width="0.8140%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="20"/><text x="0.8440%" y="703.50">__GI___li..</text></g><g><title>tcache_get (3 samples, 0.12%)</title><rect x="1.5059%" y="677" width="0.1221%" height="15" fill="rgb(226,3,54)" fg:x="37" fg:w="3"/><text x="1.5359%" y="687.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="2.0350%" y="677" width="0.0407%" height="15" fill="rgb(245,192,40)" fg:x="50" fg:w="1"/><text x="2.0650%" y="687.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.49%)</title><rect x="1.6280%" y="693" width="0.4884%" height="15" fill="rgb(238,167,29)" fg:x="40" fg:w="12"/><text x="1.6580%" y="703.50">__GI..</text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="2.0757%" y="677" width="0.0407%" height="15" fill="rgb(232,182,51)" fg:x="51" fg:w="1"/><text x="2.1057%" y="687.50"></text></g><g><title>__libc_calloc (3 samples, 0.12%)</title><rect x="2.1164%" y="693" width="0.1221%" height="15" fill="rgb(231,60,39)" fg:x="52" fg:w="3"/><text x="2.1464%" y="703.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.08%)</title><rect x="2.2385%" y="693" width="0.0814%" height="15" fill="rgb(208,69,12)" fg:x="55" fg:w="2"/><text x="2.2685%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.08%)</title><rect x="2.3199%" y="693" width="0.0814%" height="15" fill="rgb(235,93,37)" fg:x="57" fg:w="2"/><text x="2.3499%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="2.4013%" y="693" width="0.0407%" height="15" fill="rgb(213,116,39)" fg:x="59" fg:w="1"/><text x="2.4313%" y="703.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.04%)</title><rect x="2.4420%" y="693" width="0.0407%" height="15" fill="rgb(222,207,29)" fg:x="60" fg:w="1"/><text x="2.4720%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.04%)</title><rect x="2.4420%" y="677" width="0.0407%" height="15" fill="rgb(206,96,30)" fg:x="60" fg:w="1"/><text x="2.4720%" y="687.50"></text></g><g><title>__rdl_realloc (2 samples, 0.08%)</title><rect x="2.4827%" y="693" width="0.0814%" height="15" fill="rgb(218,138,4)" fg:x="61" fg:w="2"/><text x="2.5127%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.04%)</title><rect x="2.5234%" y="677" width="0.0407%" height="15" fill="rgb(250,191,14)" fg:x="62" fg:w="1"/><text x="2.5534%" y="687.50"></text></g><g><title>_int_free (26 samples, 1.06%)</title><rect x="2.5641%" y="693" width="1.0582%" height="15" fill="rgb(239,60,40)" fg:x="63" fg:w="26"/><text x="2.5941%" y="703.50">_int_free</text></g><g><title>tcache_put (2 samples, 0.08%)</title><rect x="3.5409%" y="677" width="0.0814%" height="15" fill="rgb(206,27,48)" fg:x="87" fg:w="2"/><text x="3.5709%" y="687.50"></text></g><g><title>_int_malloc (24 samples, 0.98%)</title><rect x="3.6223%" y="693" width="0.9768%" height="15" fill="rgb(225,35,8)" fg:x="89" fg:w="24"/><text x="3.6523%" y="703.50">_int_malloc</text></g><g><title>_int_realloc (1 samples, 0.04%)</title><rect x="4.5991%" y="693" width="0.0407%" height="15" fill="rgb(250,213,24)" fg:x="113" fg:w="1"/><text x="4.6291%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.61%)</title><rect x="4.6398%" y="693" width="0.6105%" height="15" fill="rgb(247,123,22)" fg:x="114" fg:w="15"/><text x="4.6698%" y="703.50">alloc:..</text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.49%)</title><rect x="5.2503%" y="693" width="0.4884%" height="15" fill="rgb(231,138,38)" fg:x="129" fg:w="12"/><text x="5.2803%" y="703.50">allo..</text></g><g><title>core::fmt::write (1 samples, 0.04%)</title><rect x="5.7387%" y="693" width="0.0407%" height="15" fill="rgb(231,145,46)" fg:x="141" fg:w="1"/><text x="5.7687%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.04%)</title><rect x="5.7387%" y="677" width="0.0407%" height="15" fill="rgb(251,118,11)" fg:x="141" fg:w="1"/><text x="5.7687%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="5.7794%" y="693" width="0.0407%" height="15" fill="rgb(217,147,25)" fg:x="142" fg:w="1"/><text x="5.8094%" y="703.50"></text></g><g><title>santa_solver::permutation::Permutation::pow (1 samples, 0.04%)</title><rect x="5.7794%" y="677" width="0.0407%" height="15" fill="rgb(247,81,37)" fg:x="142" fg:w="1"/><text x="5.8094%" y="687.50"></text></g><g><title>malloc_consolidate (1 samples, 0.04%)</title><rect x="5.8201%" y="693" width="0.0407%" height="15" fill="rgb(209,12,38)" fg:x="143" fg:w="1"/><text x="5.8501%" y="703.50"></text></g><g><title>santa_solver::kalka_teicher_tsaban::factorize (1 samples, 0.04%)</title><rect x="5.8608%" y="693" width="0.0407%" height="15" fill="rgb(227,1,9)" fg:x="144" fg:w="1"/><text x="5.8908%" y="703.50"></text></g><g><title>santa_solver::permutation::Permutation::compute_info (22 samples, 0.90%)</title><rect x="5.9015%" y="693" width="0.8954%" height="15" fill="rgb(248,47,43)" fg:x="145" fg:w="22"/><text x="5.9315%" y="703.50">santa_solv..</text></g><g><title>santa_solver::permutation::Permutation::pow (13 samples, 0.53%)</title><rect x="6.7969%" y="693" width="0.5291%" height="15" fill="rgb(221,10,30)" fg:x="167" fg:w="13"/><text x="6.8269%" y="703.50">santa..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.04%)</title><rect x="7.3260%" y="693" width="0.0407%" height="15" fill="rgb(210,229,1)" fg:x="180" fg:w="1"/><text x="7.3560%" y="703.50"></text></g><g><title>[[heap]] (178 samples, 7.24%)</title><rect x="0.2442%" y="709" width="7.2446%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="178"/><text x="0.2742%" y="719.50">[[heap]]</text></g><g><title>unlink_chunk (3 samples, 0.12%)</title><rect x="7.3667%" y="693" width="0.1221%" height="15" fill="rgb(234,67,33)" fg:x="181" fg:w="3"/><text x="7.3967%" y="703.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="7.4888%" y="693" width="0.0407%" height="15" fill="rgb(247,98,35)" fg:x="184" fg:w="1"/><text x="7.5188%" y="703.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="7.4888%" y="677" width="0.0407%" height="15" fill="rgb(247,138,52)" fg:x="184" fg:w="1"/><text x="7.5188%" y="687.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="7.8551%" y="677" width="0.0407%" height="15" fill="rgb(213,79,30)" fg:x="193" fg:w="1"/><text x="7.8851%" y="687.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="7.8958%" y="677" width="0.0407%" height="15" fill="rgb(246,177,23)" fg:x="194" fg:w="1"/><text x="7.9258%" y="687.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.49%)</title><rect x="7.5295%" y="693" width="0.4884%" height="15" fill="rgb(230,62,27)" fg:x="185" fg:w="12"/><text x="7.5595%" y="703.50">__GI..</text></g><g><title>tcache_get (2 samples, 0.08%)</title><rect x="7.9365%" y="677" width="0.0814%" height="15" fill="rgb(216,154,8)" fg:x="195" fg:w="2"/><text x="7.9665%" y="687.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.08%)</title><rect x="8.0179%" y="693" width="0.0814%" height="15" fill="rgb(244,35,45)" fg:x="197" fg:w="2"/><text x="8.0479%" y="703.50"></text></g><g><title>__libc_calloc (4 samples, 0.16%)</title><rect x="8.0993%" y="693" width="0.1628%" height="15" fill="rgb(251,115,12)" fg:x="199" fg:w="4"/><text x="8.1293%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="8.2621%" y="693" width="0.0407%" height="15" fill="rgb(240,54,50)" fg:x="203" fg:w="1"/><text x="8.2921%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="8.3028%" y="693" width="0.0407%" height="15" fill="rgb(233,84,52)" fg:x="204" fg:w="1"/><text x="8.3328%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="8.3028%" y="677" width="0.0407%" height="15" fill="rgb(207,117,47)" fg:x="204" fg:w="1"/><text x="8.3328%" y="687.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.04%)</title><rect x="8.3435%" y="693" width="0.0407%" height="15" fill="rgb(249,43,39)" fg:x="205" fg:w="1"/><text x="8.3735%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.04%)</title><rect x="8.3435%" y="677" width="0.0407%" height="15" fill="rgb(209,38,44)" fg:x="205" fg:w="1"/><text x="8.3735%" y="687.50"></text></g><g><title>_int_free (24 samples, 0.98%)</title><rect x="8.3842%" y="693" width="0.9768%" height="15" fill="rgb(236,212,23)" fg:x="206" fg:w="24"/><text x="8.4142%" y="703.50">_int_free</text></g><g><title>_int_malloc (12 samples, 0.49%)</title><rect x="9.3610%" y="693" width="0.4884%" height="15" fill="rgb(242,79,21)" fg:x="230" fg:w="12"/><text x="9.3910%" y="703.50">_int..</text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="9.8087%" y="677" width="0.0407%" height="15" fill="rgb(211,96,35)" fg:x="241" fg:w="1"/><text x="9.8387%" y="687.50"></text></g><g><title>_int_realloc (6 samples, 0.24%)</title><rect x="9.8494%" y="693" width="0.2442%" height="15" fill="rgb(253,215,40)" fg:x="242" fg:w="6"/><text x="9.8794%" y="703.50">_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.65%)</title><rect x="10.0936%" y="693" width="0.6512%" height="15" fill="rgb(211,81,21)" fg:x="248" fg:w="16"/><text x="10.1236%" y="703.50">alloc::..</text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.61%)</title><rect x="10.7448%" y="693" width="0.6105%" height="15" fill="rgb(208,190,38)" fg:x="264" fg:w="15"/><text x="10.7748%" y="703.50">alloc:..</text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.04%)</title><rect x="11.3553%" y="693" width="0.0407%" height="15" fill="rgb(235,213,38)" fg:x="279" fg:w="1"/><text x="11.3853%" y="703.50"></text></g><g><title>malloc_consolidate (6 samples, 0.24%)</title><rect x="11.3960%" y="693" width="0.2442%" height="15" fill="rgb(237,122,38)" fg:x="280" fg:w="6"/><text x="11.4260%" y="703.50">m..</text></g><g><title>santa_solver::kalka_teicher_tsaban::factorize (4 samples, 0.16%)</title><rect x="11.6402%" y="693" width="0.1628%" height="15" fill="rgb(244,218,35)" fg:x="286" fg:w="4"/><text x="11.6702%" y="703.50"></text></g><g><title>santa_solver::permutation::Permutation::compute_info (1 samples, 0.04%)</title><rect x="11.8030%" y="693" width="0.0407%" height="15" fill="rgb(240,68,47)" fg:x="290" fg:w="1"/><text x="11.8330%" y="703.50"></text></g><g><title>santa_solver::permutation::Permutation::pow (12 samples, 0.49%)</title><rect x="11.8437%" y="693" width="0.4884%" height="15" fill="rgb(210,16,53)" fg:x="291" fg:w="12"/><text x="11.8737%" y="703.50">sant..</text></g><g><title>[[stack]] (120 samples, 4.88%)</title><rect x="7.4888%" y="709" width="4.8840%" height="15" fill="rgb(235,124,12)" fg:x="184" fg:w="120"/><text x="7.5188%" y="719.50">[[stack]]</text></g><g><title>unlink_chunk (1 samples, 0.04%)</title><rect x="12.3321%" y="693" width="0.0407%" height="15" fill="rgb(224,169,11)" fg:x="303" fg:w="1"/><text x="12.3621%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="12.3728%" y="693" width="0.0407%" height="15" fill="rgb(250,166,2)" fg:x="304" fg:w="1"/><text x="12.4028%" y="703.50"></text></g><g><title>_int_malloc (17 samples, 0.69%)</title><rect x="12.4135%" y="693" width="0.6919%" height="15" fill="rgb(242,216,29)" fg:x="305" fg:w="17"/><text x="12.4435%" y="703.50">_int_ma..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.20%)</title><rect x="13.1054%" y="693" width="0.2035%" height="15" fill="rgb(230,116,27)" fg:x="322" fg:w="5"/><text x="13.1354%" y="703.50"></text></g><g><title>[anon] (49 samples, 1.99%)</title><rect x="12.3728%" y="709" width="1.9943%" height="15" fill="rgb(228,99,48)" fg:x="304" fg:w="49"/><text x="12.4028%" y="719.50">[anon]</text></g><g><title>santa_solver::permutation::Permutation::compute_info (26 samples, 1.06%)</title><rect x="13.3089%" y="693" width="1.0582%" height="15" fill="rgb(253,11,6)" fg:x="327" fg:w="26"/><text x="13.3389%" y="703.50">santa_solver..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="14.3671%" y="693" width="0.0407%" height="15" fill="rgb(247,143,39)" fg:x="353" fg:w="1"/><text x="14.3971%" y="703.50"></text></g><g><title>__libc_calloc (1 samples, 0.04%)</title><rect x="14.4078%" y="693" width="0.0407%" height="15" fill="rgb(236,97,10)" fg:x="354" fg:w="1"/><text x="14.4378%" y="703.50"></text></g><g><title>_int_free (3 samples, 0.12%)</title><rect x="14.4485%" y="693" width="0.1221%" height="15" fill="rgb(233,208,19)" fg:x="355" fg:w="3"/><text x="14.4785%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.12%)</title><rect x="14.5706%" y="693" width="0.1221%" height="15" fill="rgb(216,164,2)" fg:x="358" fg:w="3"/><text x="14.6006%" y="703.50"></text></g><g><title>malloc_consolidate (2 samples, 0.08%)</title><rect x="14.6927%" y="693" width="0.0814%" height="15" fill="rgb(220,129,5)" fg:x="361" fg:w="2"/><text x="14.7227%" y="703.50"></text></g><g><title>santa_solver::permutation::Permutation::pow (13 samples, 0.53%)</title><rect x="14.7741%" y="693" width="0.5291%" height="15" fill="rgb(242,17,10)" fg:x="363" fg:w="13"/><text x="14.8041%" y="703.50">santa..</text></g><g><title>[libc.so.6] (24 samples, 0.98%)</title><rect x="14.3671%" y="709" width="0.9768%" height="15" fill="rgb(242,107,0)" fg:x="353" fg:w="24"/><text x="14.3971%" y="719.50">[libc.so.6]</text></g><g><title>unlink_chunk (1 samples, 0.04%)</title><rect x="15.3032%" y="693" width="0.0407%" height="15" fill="rgb(251,28,31)" fg:x="376" fg:w="1"/><text x="15.3332%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.04%)</title><rect x="15.5881%" y="693" width="0.0407%" height="15" fill="rgb(233,223,10)" fg:x="383" fg:w="1"/><text x="15.6181%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.28%)</title><rect x="15.6288%" y="693" width="0.2849%" height="15" fill="rgb(215,21,27)" fg:x="384" fg:w="7"/><text x="15.6588%" y="703.50">&lt;c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.12%)</title><rect x="15.9137%" y="693" width="0.1221%" height="15" fill="rgb(232,23,21)" fg:x="391" fg:w="3"/><text x="15.9437%" y="703.50"></text></g><g><title>&lt;santa_solver::groups::PermutationGroupIterator as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.24%)</title><rect x="16.0358%" y="693" width="0.2442%" height="15" fill="rgb(244,5,23)" fg:x="394" fg:w="6"/><text x="16.0658%" y="703.50">&lt;..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.04%)</title><rect x="16.2800%" y="693" width="0.0407%" height="15" fill="rgb(226,81,46)" fg:x="400" fg:w="1"/><text x="16.3100%" y="703.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.24%)</title><rect x="16.3207%" y="693" width="0.2442%" height="15" fill="rgb(247,70,30)" fg:x="401" fg:w="6"/><text x="16.3507%" y="703.50">&lt;..</text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="16.5649%" y="693" width="0.0407%" height="15" fill="rgb(212,68,19)" fg:x="407" fg:w="1"/><text x="16.5949%" y="703.50"></text></g><g><title>[unknown] (17 samples, 0.69%)</title><rect x="16.6056%" y="693" width="0.6919%" height="15" fill="rgb(240,187,13)" fg:x="408" fg:w="17"/><text x="16.6356%" y="703.50">[unknow..</text></g><g><title>[unknown] (16 samples, 0.65%)</title><rect x="16.6463%" y="677" width="0.6512%" height="15" fill="rgb(223,113,26)" fg:x="409" fg:w="16"/><text x="16.6763%" y="687.50">[unknow..</text></g><g><title>[unknown] (15 samples, 0.61%)</title><rect x="16.6870%" y="661" width="0.6105%" height="15" fill="rgb(206,192,2)" fg:x="410" fg:w="15"/><text x="16.7170%" y="671.50">[unkno..</text></g><g><title>[unknown] (13 samples, 0.53%)</title><rect x="16.7684%" y="645" width="0.5291%" height="15" fill="rgb(241,108,4)" fg:x="412" fg:w="13"/><text x="16.7984%" y="655.50">[unkn..</text></g><g><title>[unknown] (12 samples, 0.49%)</title><rect x="16.8091%" y="629" width="0.4884%" height="15" fill="rgb(247,173,49)" fg:x="413" fg:w="12"/><text x="16.8391%" y="639.50">[unk..</text></g><g><title>[unknown] (12 samples, 0.49%)</title><rect x="16.8091%" y="613" width="0.4884%" height="15" fill="rgb(224,114,35)" fg:x="413" fg:w="12"/><text x="16.8391%" y="623.50">[unk..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="17.0126%" y="597" width="0.2849%" height="15" fill="rgb(245,159,27)" fg:x="418" fg:w="7"/><text x="17.0426%" y="607.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="17.0126%" y="581" width="0.2849%" height="15" fill="rgb(245,172,44)" fg:x="418" fg:w="7"/><text x="17.0426%" y="591.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="17.0126%" y="565" width="0.2849%" height="15" fill="rgb(236,23,11)" fg:x="418" fg:w="7"/><text x="17.0426%" y="575.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="17.0126%" y="549" width="0.2849%" height="15" fill="rgb(205,117,38)" fg:x="418" fg:w="7"/><text x="17.0426%" y="559.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="17.0126%" y="533" width="0.2849%" height="15" fill="rgb(237,72,25)" fg:x="418" fg:w="7"/><text x="17.0426%" y="543.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="17.0126%" y="517" width="0.2849%" height="15" fill="rgb(244,70,9)" fg:x="418" fg:w="7"/><text x="17.0426%" y="527.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="17.0126%" y="501" width="0.2849%" height="15" fill="rgb(217,125,39)" fg:x="418" fg:w="7"/><text x="17.0426%" y="511.50">[u..</text></g><g><title>[unknown] (6 samples, 0.24%)</title><rect x="17.0533%" y="485" width="0.2442%" height="15" fill="rgb(235,36,10)" fg:x="419" fg:w="6"/><text x="17.0833%" y="495.50">[..</text></g><g><title>[unknown] (3 samples, 0.12%)</title><rect x="17.1754%" y="469" width="0.1221%" height="15" fill="rgb(251,123,47)" fg:x="422" fg:w="3"/><text x="17.2054%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="17.2161%" y="453" width="0.0814%" height="15" fill="rgb(221,13,13)" fg:x="423" fg:w="2"/><text x="17.2461%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="17.2568%" y="437" width="0.0407%" height="15" fill="rgb(238,131,9)" fg:x="424" fg:w="1"/><text x="17.2868%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="17.2568%" y="421" width="0.0407%" height="15" fill="rgb(211,50,8)" fg:x="424" fg:w="1"/><text x="17.2868%" y="431.50"></text></g><g><title>__GI___libc_free (49 samples, 1.99%)</title><rect x="17.2975%" y="693" width="1.9943%" height="15" fill="rgb(245,182,24)" fg:x="425" fg:w="49"/><text x="17.3275%" y="703.50">__GI___libc_free</text></g><g><title>arena_for_chunk (4 samples, 0.16%)</title><rect x="19.1290%" y="677" width="0.1628%" height="15" fill="rgb(242,14,37)" fg:x="470" fg:w="4"/><text x="19.1590%" y="687.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="21.5710%" y="677" width="0.0407%" height="15" fill="rgb(246,228,12)" fg:x="530" fg:w="1"/><text x="21.6010%" y="687.50"></text></g><g><title>checked_request2size (7 samples, 0.28%)</title><rect x="21.6117%" y="677" width="0.2849%" height="15" fill="rgb(213,55,15)" fg:x="531" fg:w="7"/><text x="21.6417%" y="687.50">ch..</text></g><g><title>__GI___libc_malloc (76 samples, 3.09%)</title><rect x="19.2918%" y="693" width="3.0932%" height="15" fill="rgb(209,9,3)" fg:x="474" fg:w="76"/><text x="19.3218%" y="703.50">__GI___libc_malloc</text></g><g><title>tcache_get (12 samples, 0.49%)</title><rect x="21.8966%" y="677" width="0.4884%" height="15" fill="rgb(230,59,30)" fg:x="538" fg:w="12"/><text x="21.9266%" y="687.50">tcac..</text></g><g><title>arena_for_chunk (3 samples, 0.12%)</title><rect x="23.3618%" y="677" width="0.1221%" height="15" fill="rgb(209,121,21)" fg:x="574" fg:w="3"/><text x="23.3918%" y="687.50"></text></g><g><title>__GI___libc_realloc (28 samples, 1.14%)</title><rect x="22.3850%" y="693" width="1.1396%" height="15" fill="rgb(220,109,13)" fg:x="550" fg:w="28"/><text x="22.4150%" y="703.50">__GI___libc_re..</text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="23.4839%" y="677" width="0.0407%" height="15" fill="rgb(232,18,1)" fg:x="577" fg:w="1"/><text x="23.5139%" y="687.50"></text></g><g><title>__libc_calloc (23 samples, 0.94%)</title><rect x="23.5246%" y="693" width="0.9361%" height="15" fill="rgb(215,41,42)" fg:x="578" fg:w="23"/><text x="23.5546%" y="703.50">__libc_call..</text></g><g><title>__memcpy_avx_unaligned_erms (23 samples, 0.94%)</title><rect x="24.4607%" y="693" width="0.9361%" height="15" fill="rgb(224,123,36)" fg:x="601" fg:w="23"/><text x="24.4907%" y="703.50">__memcpy_av..</text></g><g><title>__rdl_alloc (11 samples, 0.45%)</title><rect x="25.3968%" y="693" width="0.4477%" height="15" fill="rgb(240,125,3)" fg:x="624" fg:w="11"/><text x="25.4268%" y="703.50">__rd..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.28%)</title><rect x="25.5596%" y="677" width="0.2849%" height="15" fill="rgb(205,98,50)" fg:x="628" fg:w="7"/><text x="25.5896%" y="687.50">st..</text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.04%)</title><rect x="25.8445%" y="693" width="0.0407%" height="15" fill="rgb(205,185,37)" fg:x="635" fg:w="1"/><text x="25.8745%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.04%)</title><rect x="25.8445%" y="677" width="0.0407%" height="15" fill="rgb(238,207,15)" fg:x="635" fg:w="1"/><text x="25.8745%" y="687.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.12%)</title><rect x="25.8852%" y="693" width="0.1221%" height="15" fill="rgb(213,199,42)" fg:x="636" fg:w="3"/><text x="25.9152%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.12%)</title><rect x="25.8852%" y="677" width="0.1221%" height="15" fill="rgb(235,201,11)" fg:x="636" fg:w="3"/><text x="25.9152%" y="687.50"></text></g><g><title>__rdl_realloc (9 samples, 0.37%)</title><rect x="26.0073%" y="693" width="0.3663%" height="15" fill="rgb(207,46,11)" fg:x="639" fg:w="9"/><text x="26.0373%" y="703.50">__r..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.24%)</title><rect x="26.1294%" y="677" width="0.2442%" height="15" fill="rgb(241,35,35)" fg:x="642" fg:w="6"/><text x="26.1594%" y="687.50">s..</text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="26.3736%" y="693" width="0.0407%" height="15" fill="rgb(243,32,47)" fg:x="648" fg:w="1"/><text x="26.4036%" y="703.50"></text></g><g><title>__rust_alloc_zeroed (1 samples, 0.04%)</title><rect x="26.4143%" y="693" width="0.0407%" height="15" fill="rgb(247,202,23)" fg:x="649" fg:w="1"/><text x="26.4443%" y="703.50"></text></g><g><title>__rust_dealloc (11 samples, 0.45%)</title><rect x="26.4550%" y="693" width="0.4477%" height="15" fill="rgb(219,102,11)" fg:x="650" fg:w="11"/><text x="26.4850%" y="703.50">__ru..</text></g><g><title>free_perturb (5 samples, 0.20%)</title><rect x="33.3740%" y="677" width="0.2035%" height="15" fill="rgb(243,110,44)" fg:x="820" fg:w="5"/><text x="33.4040%" y="687.50"></text></g><g><title>_int_free (177 samples, 7.20%)</title><rect x="26.9027%" y="693" width="7.2039%" height="15" fill="rgb(222,74,54)" fg:x="661" fg:w="177"/><text x="26.9327%" y="703.50">_int_free</text></g><g><title>tcache_put (13 samples, 0.53%)</title><rect x="33.5775%" y="677" width="0.5291%" height="15" fill="rgb(216,99,12)" fg:x="825" fg:w="13"/><text x="33.6075%" y="687.50">tcach..</text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="42.3687%" y="677" width="0.0407%" height="15" fill="rgb(226,22,26)" fg:x="1041" fg:w="1"/><text x="42.3987%" y="687.50"></text></g><g><title>free_perturb (1 samples, 0.04%)</title><rect x="42.3687%" y="661" width="0.0407%" height="15" fill="rgb(217,163,10)" fg:x="1041" fg:w="1"/><text x="42.3987%" y="671.50"></text></g><g><title>alloc_perturb (1 samples, 0.04%)</title><rect x="42.4094%" y="677" width="0.0407%" height="15" fill="rgb(213,25,53)" fg:x="1042" fg:w="1"/><text x="42.4394%" y="687.50"></text></g><g><title>checked_request2size (4 samples, 0.16%)</title><rect x="42.4501%" y="677" width="0.1628%" height="15" fill="rgb(252,105,26)" fg:x="1043" fg:w="4"/><text x="42.4801%" y="687.50"></text></g><g><title>_int_malloc (216 samples, 8.79%)</title><rect x="34.1066%" y="693" width="8.7912%" height="15" fill="rgb(220,39,43)" fg:x="838" fg:w="216"/><text x="34.1366%" y="703.50">_int_malloc</text></g><g><title>tcache_put (7 samples, 0.28%)</title><rect x="42.6129%" y="677" width="0.2849%" height="15" fill="rgb(229,68,48)" fg:x="1047" fg:w="7"/><text x="42.6429%" y="687.50">tc..</text></g><g><title>_int_realloc (33 samples, 1.34%)</title><rect x="42.8978%" y="693" width="1.3431%" height="15" fill="rgb(252,8,32)" fg:x="1054" fg:w="33"/><text x="42.9278%" y="703.50">_int_realloc</text></g><g><title>__GI___libc_realloc (2 samples, 0.08%)</title><rect x="44.1595%" y="677" width="0.0814%" height="15" fill="rgb(223,20,43)" fg:x="1085" fg:w="2"/><text x="44.1895%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 1.30%)</title><rect x="44.2409%" y="693" width="1.3024%" height="15" fill="rgb(229,81,49)" fg:x="1087" fg:w="32"/><text x="44.2709%" y="703.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::finish_grow (48 samples, 1.95%)</title><rect x="45.5433%" y="693" width="1.9536%" height="15" fill="rgb(236,28,36)" fg:x="1119" fg:w="48"/><text x="45.5733%" y="703.50">alloc::raw_vec::finish_gr..</text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.04%)</title><rect x="47.4969%" y="693" width="0.0407%" height="15" fill="rgb(249,185,26)" fg:x="1167" fg:w="1"/><text x="47.5269%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.04%)</title><rect x="47.5376%" y="693" width="0.0407%" height="15" fill="rgb(249,174,33)" fg:x="1168" fg:w="1"/><text x="47.5676%" y="703.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.04%)</title><rect x="47.5376%" y="677" width="0.0407%" height="15" fill="rgb(233,201,37)" fg:x="1168" fg:w="1"/><text x="47.5676%" y="687.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.04%)</title><rect x="47.5783%" y="693" width="0.0407%" height="15" fill="rgb(221,78,26)" fg:x="1169" fg:w="1"/><text x="47.6083%" y="703.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.04%)</title><rect x="47.5783%" y="677" width="0.0407%" height="15" fill="rgb(250,127,30)" fg:x="1169" fg:w="1"/><text x="47.6083%" y="687.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.12%)</title><rect x="47.6190%" y="677" width="0.1221%" height="15" fill="rgb(230,49,44)" fg:x="1170" fg:w="3"/><text x="47.6490%" y="687.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="47.7411%" y="677" width="0.0407%" height="15" fill="rgb(229,67,23)" fg:x="1173" fg:w="1"/><text x="47.7711%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.20%)</title><rect x="47.7818%" y="677" width="0.2035%" height="15" fill="rgb(249,83,47)" fg:x="1174" fg:w="5"/><text x="47.8118%" y="687.50"></text></g><g><title>create_thread (11 samples, 0.45%)</title><rect x="47.6190%" y="693" width="0.4477%" height="15" fill="rgb(215,43,3)" fg:x="1170" fg:w="11"/><text x="47.6490%" y="703.50">crea..</text></g><g><title>santa_solver::permutation::Permutation::compute_info (2 samples, 0.08%)</title><rect x="47.9853%" y="677" width="0.0814%" height="15" fill="rgb(238,154,13)" fg:x="1179" fg:w="2"/><text x="48.0153%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="48.0667%" y="693" width="0.0407%" height="15" fill="rgb(219,56,2)" fg:x="1181" fg:w="1"/><text x="48.0967%" y="703.50"></text></g><g><title>malloc_consolidate (61 samples, 2.48%)</title><rect x="48.1074%" y="693" width="2.4827%" height="15" fill="rgb(233,0,4)" fg:x="1182" fg:w="61"/><text x="48.1374%" y="703.50">malloc_consolidate</text></g><g><title>santa_solver::kalka_teicher_tsaban::factorize (51 samples, 2.08%)</title><rect x="50.5902%" y="693" width="2.0757%" height="15" fill="rgb(235,30,7)" fg:x="1243" fg:w="51"/><text x="50.6202%" y="703.50">santa_solver::kalka_teicher..</text></g><g><title>santa_solver::permutation::Permutation::compute_info (150 samples, 6.11%)</title><rect x="52.6659%" y="693" width="6.1050%" height="15" fill="rgb(250,79,13)" fg:x="1294" fg:w="150"/><text x="52.6959%" y="703.50">santa_solver::permutation::Permutation::compute_info</text></g><g><title>santa_solver::permutation::Permutation::pow (418 samples, 17.01%)</title><rect x="58.7709%" y="693" width="17.0126%" height="15" fill="rgb(211,146,34)" fg:x="1444" fg:w="418"/><text x="58.8009%" y="703.50">santa_solver::permutation::Permutation::pow</text></g><g><title>santa_solver::puzzle::load_puzzles (1 samples, 0.04%)</title><rect x="75.7835%" y="693" width="0.0407%" height="15" fill="rgb(228,22,38)" fg:x="1862" fg:w="1"/><text x="75.8135%" y="703.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (1 samples, 0.04%)</title><rect x="75.8242%" y="693" width="0.0407%" height="15" fill="rgb(235,168,5)" fg:x="1863" fg:w="1"/><text x="75.8542%" y="703.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.04%)</title><rect x="75.8649%" y="693" width="0.0407%" height="15" fill="rgb(221,155,16)" fg:x="1864" fg:w="1"/><text x="75.8949%" y="703.50"></text></g><g><title>[unknown] (1,504 samples, 61.21%)</title><rect x="15.3439%" y="709" width="61.2129%" height="15" fill="rgb(215,215,53)" fg:x="377" fg:w="1504"/><text x="15.3739%" y="719.50">[unknown]</text></g><g><title>unlink_chunk (16 samples, 0.65%)</title><rect x="75.9056%" y="693" width="0.6512%" height="15" fill="rgb(223,4,10)" fg:x="1865" fg:w="16"/><text x="75.9356%" y="703.50">unlink_..</text></g><g><title>__GI___libc_free (3 samples, 0.12%)</title><rect x="76.5568%" y="709" width="0.1221%" height="15" fill="rgb(234,103,6)" fg:x="1881" fg:w="3"/><text x="76.5868%" y="719.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.08%)</title><rect x="76.6789%" y="709" width="0.0814%" height="15" fill="rgb(227,97,0)" fg:x="1884" fg:w="2"/><text x="76.7089%" y="719.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.04%)</title><rect x="76.7603%" y="709" width="0.0407%" height="15" fill="rgb(234,150,53)" fg:x="1886" fg:w="1"/><text x="76.7903%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.16%)</title><rect x="76.8010%" y="709" width="0.1628%" height="15" fill="rgb(228,201,54)" fg:x="1887" fg:w="4"/><text x="76.8310%" y="719.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="76.9638%" y="709" width="0.0407%" height="15" fill="rgb(222,22,37)" fg:x="1891" fg:w="1"/><text x="76.9938%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="76.9638%" y="693" width="0.0407%" height="15" fill="rgb(237,53,32)" fg:x="1891" fg:w="1"/><text x="76.9938%" y="703.50"></text></g><g><title>__rdl_realloc (2 samples, 0.08%)</title><rect x="77.0045%" y="709" width="0.0814%" height="15" fill="rgb(233,25,53)" fg:x="1892" fg:w="2"/><text x="77.0345%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.04%)</title><rect x="77.0452%" y="693" width="0.0407%" height="15" fill="rgb(210,40,34)" fg:x="1893" fg:w="1"/><text x="77.0752%" y="703.50"></text></g><g><title>__rust_realloc (1 samples, 0.04%)</title><rect x="77.0859%" y="709" width="0.0407%" height="15" fill="rgb(241,220,44)" fg:x="1894" fg:w="1"/><text x="77.1159%" y="719.50"></text></g><g><title>_int_free (2 samples, 0.08%)</title><rect x="77.1266%" y="709" width="0.0814%" height="15" fill="rgb(235,28,35)" fg:x="1895" fg:w="2"/><text x="77.1566%" y="719.50"></text></g><g><title>_int_malloc (3 samples, 0.12%)</title><rect x="77.2080%" y="709" width="0.1221%" height="15" fill="rgb(210,56,17)" fg:x="1897" fg:w="3"/><text x="77.2380%" y="719.50"></text></g><g><title>_int_realloc (1 samples, 0.04%)</title><rect x="77.3301%" y="709" width="0.0407%" height="15" fill="rgb(224,130,29)" fg:x="1900" fg:w="1"/><text x="77.3601%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="77.3708%" y="437" width="0.0407%" height="15" fill="rgb(235,212,8)" fg:x="1901" fg:w="1"/><text x="77.4008%" y="447.50"></text></g><g><title>santa_solver::kalka_teicher_tsaban::factorize (1 samples, 0.04%)</title><rect x="77.3708%" y="421" width="0.0407%" height="15" fill="rgb(223,33,50)" fg:x="1901" fg:w="1"/><text x="77.4008%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="77.4522%" y="373" width="0.0407%" height="15" fill="rgb(219,149,13)" fg:x="1903" fg:w="1"/><text x="77.4822%" y="383.50"></text></g><g><title>__libc_calloc (6 samples, 0.24%)</title><rect x="77.4522%" y="405" width="0.2442%" height="15" fill="rgb(250,156,29)" fg:x="1903" fg:w="6"/><text x="77.4822%" y="415.50">_..</text></g><g><title>_int_malloc (6 samples, 0.24%)</title><rect x="77.4522%" y="389" width="0.2442%" height="15" fill="rgb(216,193,19)" fg:x="1903" fg:w="6"/><text x="77.4822%" y="399.50">_..</text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="77.4929%" y="373" width="0.2035%" height="15" fill="rgb(216,135,14)" fg:x="1904" fg:w="5"/><text x="77.5229%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="77.4929%" y="357" width="0.2035%" height="15" fill="rgb(241,47,5)" fg:x="1904" fg:w="5"/><text x="77.5229%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="77.4929%" y="341" width="0.2035%" height="15" fill="rgb(233,42,35)" fg:x="1904" fg:w="5"/><text x="77.5229%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="77.4929%" y="325" width="0.2035%" height="15" fill="rgb(231,13,6)" fg:x="1904" fg:w="5"/><text x="77.5229%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="77.4929%" y="309" width="0.2035%" height="15" fill="rgb(207,181,40)" fg:x="1904" fg:w="5"/><text x="77.5229%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="77.5336%" y="293" width="0.1628%" height="15" fill="rgb(254,173,49)" fg:x="1905" fg:w="4"/><text x="77.5636%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="77.5336%" y="277" width="0.1628%" height="15" fill="rgb(221,1,38)" fg:x="1905" fg:w="4"/><text x="77.5636%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.12%)</title><rect x="77.5743%" y="261" width="0.1221%" height="15" fill="rgb(206,124,46)" fg:x="1906" fg:w="3"/><text x="77.6043%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="77.6150%" y="245" width="0.0814%" height="15" fill="rgb(249,21,11)" fg:x="1907" fg:w="2"/><text x="77.6450%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="77.6150%" y="229" width="0.0814%" height="15" fill="rgb(222,201,40)" fg:x="1907" fg:w="2"/><text x="77.6450%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="77.6150%" y="213" width="0.0814%" height="15" fill="rgb(235,61,29)" fg:x="1907" fg:w="2"/><text x="77.6450%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="77.6150%" y="197" width="0.0814%" height="15" fill="rgb(219,207,3)" fg:x="1907" fg:w="2"/><text x="77.6450%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (41 samples, 1.67%)</title><rect x="77.6964%" y="405" width="1.6687%" height="15" fill="rgb(222,56,46)" fg:x="1909" fg:w="41"/><text x="77.7264%" y="415.50">__memcpy_avx_unaligne..</text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.16%)</title><rect x="79.3651%" y="405" width="0.1628%" height="15" fill="rgb(239,76,54)" fg:x="1950" fg:w="4"/><text x="79.3951%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.16%)</title><rect x="79.3651%" y="389" width="0.1628%" height="15" fill="rgb(231,124,27)" fg:x="1950" fg:w="4"/><text x="79.3951%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.5279%" y="373" width="0.0407%" height="15" fill="rgb(249,195,6)" fg:x="1954" fg:w="1"/><text x="79.5579%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.5279%" y="357" width="0.0407%" height="15" fill="rgb(237,174,47)" fg:x="1954" fg:w="1"/><text x="79.5579%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.5279%" y="341" width="0.0407%" height="15" fill="rgb(206,201,31)" fg:x="1954" fg:w="1"/><text x="79.5579%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.5279%" y="325" width="0.0407%" height="15" fill="rgb(231,57,52)" fg:x="1954" fg:w="1"/><text x="79.5579%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.5279%" y="309" width="0.0407%" height="15" fill="rgb(248,177,22)" fg:x="1954" fg:w="1"/><text x="79.5579%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.5279%" y="293" width="0.0407%" height="15" fill="rgb(215,211,37)" fg:x="1954" fg:w="1"/><text x="79.5579%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.5279%" y="277" width="0.0407%" height="15" fill="rgb(241,128,51)" fg:x="1954" fg:w="1"/><text x="79.5579%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.5279%" y="261" width="0.0407%" height="15" fill="rgb(227,165,31)" fg:x="1954" fg:w="1"/><text x="79.5579%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.5279%" y="245" width="0.0407%" height="15" fill="rgb(228,167,24)" fg:x="1954" fg:w="1"/><text x="79.5579%" y="255.50"></text></g><g><title>&lt;santa_solver::groups::PermutationGroupIterator as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 2.69%)</title><rect x="77.4115%" y="421" width="2.6862%" height="15" fill="rgb(228,143,12)" fg:x="1902" fg:w="66"/><text x="77.4415%" y="431.50">&lt;santa_solver::groups::PermutationG..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 0.57%)</title><rect x="79.5279%" y="405" width="0.5698%" height="15" fill="rgb(249,149,8)" fg:x="1954" fg:w="14"/><text x="79.5579%" y="415.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.57%)</title><rect x="79.5279%" y="389" width="0.5698%" height="15" fill="rgb(243,35,44)" fg:x="1954" fg:w="14"/><text x="79.5579%" y="399.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.53%)</title><rect x="79.5686%" y="373" width="0.5291%" height="15" fill="rgb(246,89,9)" fg:x="1955" fg:w="13"/><text x="79.5986%" y="383.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.53%)</title><rect x="79.5686%" y="357" width="0.5291%" height="15" fill="rgb(233,213,13)" fg:x="1955" fg:w="13"/><text x="79.5986%" y="367.50">&lt;core..</text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="80.0977%" y="405" width="0.0407%" height="15" fill="rgb(233,141,41)" fg:x="1968" fg:w="1"/><text x="80.1277%" y="415.50"></text></g><g><title>_int_free (9 samples, 0.37%)</title><rect x="80.3419%" y="389" width="0.3663%" height="15" fill="rgb(239,167,4)" fg:x="1974" fg:w="9"/><text x="80.3719%" y="399.50">_in..</text></g><g><title>tcache_put (2 samples, 0.08%)</title><rect x="80.6268%" y="373" width="0.0814%" height="15" fill="rgb(209,217,16)" fg:x="1981" fg:w="2"/><text x="80.6568%" y="383.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="80.7082%" y="373" width="0.0407%" height="15" fill="rgb(219,88,35)" fg:x="1983" fg:w="1"/><text x="80.7382%" y="383.50"></text></g><g><title>_int_free (16 samples, 0.65%)</title><rect x="80.1384%" y="405" width="0.6512%" height="15" fill="rgb(220,193,23)" fg:x="1969" fg:w="16"/><text x="80.1684%" y="415.50">_int_fr..</text></g><g><title>malloc_consolidate (2 samples, 0.08%)</title><rect x="80.7082%" y="389" width="0.0814%" height="15" fill="rgb(230,90,52)" fg:x="1983" fg:w="2"/><text x="80.7382%" y="399.50"></text></g><g><title>unlink_chunk (1 samples, 0.04%)</title><rect x="80.7489%" y="373" width="0.0407%" height="15" fill="rgb(252,106,19)" fg:x="1984" fg:w="1"/><text x="80.7789%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="80.7896%" y="405" width="0.0407%" height="15" fill="rgb(206,74,20)" fg:x="1985" fg:w="1"/><text x="80.8196%" y="415.50"></text></g><g><title>__GI___libc_free (19 samples, 0.77%)</title><rect x="80.0977%" y="421" width="0.7733%" height="15" fill="rgb(230,138,44)" fg:x="1968" fg:w="19"/><text x="80.1277%" y="431.50">__GI___l..</text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="80.8303%" y="405" width="0.0407%" height="15" fill="rgb(235,182,43)" fg:x="1986" fg:w="1"/><text x="80.8603%" y="415.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.33%)</title><rect x="80.8710%" y="421" width="0.3256%" height="15" fill="rgb(242,16,51)" fg:x="1987" fg:w="8"/><text x="80.9010%" y="431.50">__..</text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="81.1966%" y="421" width="0.0407%" height="15" fill="rgb(248,9,4)" fg:x="1995" fg:w="1"/><text x="81.2266%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="81.1966%" y="405" width="0.0407%" height="15" fill="rgb(210,31,22)" fg:x="1995" fg:w="1"/><text x="81.2266%" y="415.50"></text></g><g><title>__rust_alloc_zeroed (1 samples, 0.04%)</title><rect x="81.2373%" y="421" width="0.0407%" height="15" fill="rgb(239,54,39)" fg:x="1996" fg:w="1"/><text x="81.2673%" y="431.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="81.2780%" y="421" width="0.0407%" height="15" fill="rgb(230,99,41)" fg:x="1997" fg:w="1"/><text x="81.3080%" y="431.50"></text></g><g><title>_int_realloc (10 samples, 0.41%)</title><rect x="81.3187%" y="421" width="0.4070%" height="15" fill="rgb(253,106,12)" fg:x="1998" fg:w="10"/><text x="81.3487%" y="431.50">_in..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="81.7257%" y="421" width="0.0407%" height="15" fill="rgb(213,46,41)" fg:x="2008" fg:w="1"/><text x="81.7557%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.08%)</title><rect x="81.7664%" y="405" width="0.0814%" height="15" fill="rgb(215,133,35)" fg:x="2009" fg:w="2"/><text x="81.7964%" y="415.50"></text></g><g><title>__GI___libc_free (2 samples, 0.08%)</title><rect x="81.7664%" y="389" width="0.0814%" height="15" fill="rgb(213,28,5)" fg:x="2009" fg:w="2"/><text x="81.7964%" y="399.50"></text></g><g><title>_int_free (2 samples, 0.08%)</title><rect x="81.7664%" y="373" width="0.0814%" height="15" fill="rgb(215,77,49)" fg:x="2009" fg:w="2"/><text x="81.7964%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;santa_solver::groups::PermutationGroupIterator&gt; (3 samples, 0.12%)</title><rect x="81.7664%" y="421" width="0.1221%" height="15" fill="rgb(248,100,22)" fg:x="2009" fg:w="3"/><text x="81.7964%" y="431.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="81.8478%" y="405" width="0.0407%" height="15" fill="rgb(208,67,9)" fg:x="2011" fg:w="1"/><text x="81.8778%" y="415.50"></text></g><g><title>_int_free (2 samples, 0.08%)</title><rect x="82.8653%" y="389" width="0.0814%" height="15" fill="rgb(219,133,21)" fg:x="2036" fg:w="2"/><text x="82.8953%" y="399.50"></text></g><g><title>__GI___libc_free (3 samples, 0.12%)</title><rect x="82.8653%" y="405" width="0.1221%" height="15" fill="rgb(246,46,29)" fg:x="2036" fg:w="3"/><text x="82.8953%" y="415.50"></text></g><g><title>santa_solver::permutation::Permutation::pow (1 samples, 0.04%)</title><rect x="82.9467%" y="389" width="0.0407%" height="15" fill="rgb(246,185,52)" fg:x="2038" fg:w="1"/><text x="82.9767%" y="399.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="82.9874%" y="405" width="0.0407%" height="15" fill="rgb(252,136,11)" fg:x="2039" fg:w="1"/><text x="83.0174%" y="415.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="83.0281%" y="405" width="0.0407%" height="15" fill="rgb(219,138,53)" fg:x="2040" fg:w="1"/><text x="83.0581%" y="415.50"></text></g><g><title>_int_malloc (7 samples, 0.28%)</title><rect x="83.0688%" y="405" width="0.2849%" height="15" fill="rgb(211,51,23)" fg:x="2041" fg:w="7"/><text x="83.0988%" y="415.50">_i..</text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="83.6386%" y="389" width="0.0407%" height="15" fill="rgb(247,221,28)" fg:x="2055" fg:w="1"/><text x="83.6686%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="83.6386%" y="373" width="0.0407%" height="15" fill="rgb(251,222,45)" fg:x="2055" fg:w="1"/><text x="83.6686%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="83.6386%" y="357" width="0.0407%" height="15" fill="rgb(217,162,53)" fg:x="2055" fg:w="1"/><text x="83.6686%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="83.6386%" y="341" width="0.0407%" height="15" fill="rgb(229,93,14)" fg:x="2055" fg:w="1"/><text x="83.6686%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="83.6386%" y="325" width="0.0407%" height="15" fill="rgb(209,67,49)" fg:x="2055" fg:w="1"/><text x="83.6686%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="83.6386%" y="309" width="0.0407%" height="15" fill="rgb(213,87,29)" fg:x="2055" fg:w="1"/><text x="83.6686%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="83.6793%" y="389" width="0.0407%" height="15" fill="rgb(205,151,52)" fg:x="2056" fg:w="1"/><text x="83.7093%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.16%)</title><rect x="83.7200%" y="389" width="0.1628%" height="15" fill="rgb(253,215,39)" fg:x="2057" fg:w="4"/><text x="83.7500%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="83.9235%" y="373" width="0.0407%" height="15" fill="rgb(221,220,41)" fg:x="2062" fg:w="1"/><text x="83.9535%" y="383.50"></text></g><g><title>__GI___libc_free (2 samples, 0.08%)</title><rect x="83.9642%" y="373" width="0.0814%" height="15" fill="rgb(218,133,21)" fg:x="2063" fg:w="2"/><text x="83.9942%" y="383.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="84.0049%" y="357" width="0.0407%" height="15" fill="rgb(221,193,43)" fg:x="2064" fg:w="1"/><text x="84.0349%" y="367.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="84.2898%" y="357" width="0.0407%" height="15" fill="rgb(240,128,52)" fg:x="2071" fg:w="1"/><text x="84.3198%" y="367.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="84.2898%" y="341" width="0.0407%" height="15" fill="rgb(253,114,12)" fg:x="2071" fg:w="1"/><text x="84.3198%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="84.3305%" y="357" width="0.0407%" height="15" fill="rgb(215,223,47)" fg:x="2072" fg:w="1"/><text x="84.3605%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="84.3305%" y="341" width="0.0407%" height="15" fill="rgb(248,225,23)" fg:x="2072" fg:w="1"/><text x="84.3605%" y="351.50"></text></g><g><title>alloc_perturb (2 samples, 0.08%)</title><rect x="85.8771%" y="341" width="0.0814%" height="15" fill="rgb(250,108,0)" fg:x="2110" fg:w="2"/><text x="85.9071%" y="351.50"></text></g><g><title>tcache_put (2 samples, 0.08%)</title><rect x="85.9585%" y="341" width="0.0814%" height="15" fill="rgb(228,208,7)" fg:x="2112" fg:w="2"/><text x="85.9885%" y="351.50"></text></g><g><title>_int_malloc (42 samples, 1.71%)</title><rect x="84.3712%" y="357" width="1.7094%" height="15" fill="rgb(244,45,10)" fg:x="2073" fg:w="42"/><text x="84.4012%" y="367.50">_int_malloc</text></g><g><title>unlink_chunk (1 samples, 0.04%)</title><rect x="86.0399%" y="341" width="0.0407%" height="15" fill="rgb(207,125,25)" fg:x="2114" fg:w="1"/><text x="86.0699%" y="351.50"></text></g><g><title>checked_request2size (3 samples, 0.12%)</title><rect x="86.0806%" y="357" width="0.1221%" height="15" fill="rgb(210,195,18)" fg:x="2115" fg:w="3"/><text x="86.1106%" y="367.50"></text></g><g><title>__GI___libc_malloc (54 samples, 2.20%)</title><rect x="84.0456%" y="373" width="2.1978%" height="15" fill="rgb(249,80,12)" fg:x="2065" fg:w="54"/><text x="84.0756%" y="383.50">__GI___libc_malloc</text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="86.2027%" y="357" width="0.0407%" height="15" fill="rgb(221,65,9)" fg:x="2118" fg:w="1"/><text x="86.2327%" y="367.50"></text></g><g><title>__libc_calloc (1 samples, 0.04%)</title><rect x="86.2841%" y="357" width="0.0407%" height="15" fill="rgb(235,49,36)" fg:x="2120" fg:w="1"/><text x="86.3141%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="86.3248%" y="357" width="0.0407%" height="15" fill="rgb(225,32,20)" fg:x="2121" fg:w="1"/><text x="86.3548%" y="367.50"></text></g><g><title>_int_free (3 samples, 0.12%)</title><rect x="86.3655%" y="341" width="0.1221%" height="15" fill="rgb(215,141,46)" fg:x="2122" fg:w="3"/><text x="86.3955%" y="351.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="86.4469%" y="325" width="0.0407%" height="15" fill="rgb(250,160,47)" fg:x="2124" fg:w="1"/><text x="86.4769%" y="335.50"></text></g><g><title>_int_realloc (15 samples, 0.61%)</title><rect x="86.3655%" y="357" width="0.6105%" height="15" fill="rgb(216,222,40)" fg:x="2122" fg:w="15"/><text x="86.3955%" y="367.50">_int_r..</text></g><g><title>_int_malloc (12 samples, 0.49%)</title><rect x="86.4876%" y="341" width="0.4884%" height="15" fill="rgb(234,217,39)" fg:x="2125" fg:w="12"/><text x="86.5176%" y="351.50">_int..</text></g><g><title>alloc_perturb (1 samples, 0.04%)</title><rect x="86.9353%" y="325" width="0.0407%" height="15" fill="rgb(207,178,40)" fg:x="2136" fg:w="1"/><text x="86.9653%" y="335.50"></text></g><g><title>__GI___libc_realloc (34 samples, 1.38%)</title><rect x="86.2434%" y="373" width="1.3838%" height="15" fill="rgb(221,136,13)" fg:x="2119" fg:w="34"/><text x="86.2734%" y="383.50">__GI___libc_reall..</text></g><g><title>santa_solver::permutation::Permutation::pow (16 samples, 0.65%)</title><rect x="86.9760%" y="357" width="0.6512%" height="15" fill="rgb(249,199,10)" fg:x="2137" fg:w="16"/><text x="87.0060%" y="367.50">santa_s..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (106 samples, 4.31%)</title><rect x="83.3537%" y="405" width="4.3142%" height="15" fill="rgb(249,222,13)" fg:x="2048" fg:w="106"/><text x="83.3837%" y="415.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push</text></g><g><title>alloc::raw_vec::finish_grow (93 samples, 3.79%)</title><rect x="83.8828%" y="389" width="3.7851%" height="15" fill="rgb(244,185,38)" fg:x="2061" fg:w="93"/><text x="83.9128%" y="399.50">alloc::raw_vec::finish_grow</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="87.6272%" y="373" width="0.0407%" height="15" fill="rgb(236,202,9)" fg:x="2153" fg:w="1"/><text x="87.6572%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.12%)</title><rect x="87.6679%" y="405" width="0.1221%" height="15" fill="rgb(250,229,37)" fg:x="2154" fg:w="3"/><text x="87.6979%" y="415.50"></text></g><g><title>malloc_consolidate (1 samples, 0.04%)</title><rect x="87.7900%" y="405" width="0.0407%" height="15" fill="rgb(206,174,23)" fg:x="2157" fg:w="1"/><text x="87.8200%" y="415.50"></text></g><g><title>santa_solver::permutation::Permutation::compute_info (3 samples, 0.12%)</title><rect x="87.8307%" y="405" width="0.1221%" height="15" fill="rgb(211,33,43)" fg:x="2158" fg:w="3"/><text x="87.8607%" y="415.50"></text></g><g><title>santa_solver::permutation::Permutation::pow (12 samples, 0.49%)</title><rect x="87.9528%" y="405" width="0.4884%" height="15" fill="rgb(245,58,50)" fg:x="2161" fg:w="12"/><text x="87.9828%" y="415.50">sant..</text></g><g><title>santa_solver::permutation::Permutation::compute_info (167 samples, 6.80%)</title><rect x="81.8885%" y="421" width="6.7969%" height="15" fill="rgb(244,68,36)" fg:x="2012" fg:w="167"/><text x="81.9185%" y="431.50">santa_solver::permutation::Permutation::compute_info</text></g><g><title>unlink_chunk (6 samples, 0.24%)</title><rect x="88.4412%" y="405" width="0.2442%" height="15" fill="rgb(232,229,15)" fg:x="2173" fg:w="6"/><text x="88.4712%" y="415.50">u..</text></g><g><title>[unknown] (8 samples, 0.33%)</title><rect x="95.5637%" y="405" width="0.3256%" height="15" fill="rgb(254,30,23)" fg:x="2348" fg:w="8"/><text x="95.5937%" y="415.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="95.6044%" y="389" width="0.2849%" height="15" fill="rgb(235,160,14)" fg:x="2349" fg:w="7"/><text x="95.6344%" y="399.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="95.6044%" y="373" width="0.2849%" height="15" fill="rgb(212,155,44)" fg:x="2349" fg:w="7"/><text x="95.6344%" y="383.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="95.6044%" y="357" width="0.2849%" height="15" fill="rgb(226,2,50)" fg:x="2349" fg:w="7"/><text x="95.6344%" y="367.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="95.6044%" y="341" width="0.2849%" height="15" fill="rgb(234,177,6)" fg:x="2349" fg:w="7"/><text x="95.6344%" y="351.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="95.6044%" y="325" width="0.2849%" height="15" fill="rgb(217,24,9)" fg:x="2349" fg:w="7"/><text x="95.6344%" y="335.50">[u..</text></g><g><title>[unknown] (7 samples, 0.28%)</title><rect x="95.6044%" y="309" width="0.2849%" height="15" fill="rgb(220,13,46)" fg:x="2349" fg:w="7"/><text x="95.6344%" y="319.50">[u..</text></g><g><title>[unknown] (6 samples, 0.24%)</title><rect x="95.6451%" y="293" width="0.2442%" height="15" fill="rgb(239,221,27)" fg:x="2350" fg:w="6"/><text x="95.6751%" y="303.50">[..</text></g><g><title>[unknown] (6 samples, 0.24%)</title><rect x="95.6451%" y="277" width="0.2442%" height="15" fill="rgb(222,198,25)" fg:x="2350" fg:w="6"/><text x="95.6751%" y="287.50">[..</text></g><g><title>[unknown] (6 samples, 0.24%)</title><rect x="95.6451%" y="261" width="0.2442%" height="15" fill="rgb(211,99,13)" fg:x="2350" fg:w="6"/><text x="95.6751%" y="271.50">[..</text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="95.6858%" y="245" width="0.2035%" height="15" fill="rgb(232,111,31)" fg:x="2351" fg:w="5"/><text x="95.7158%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="95.6858%" y="229" width="0.2035%" height="15" fill="rgb(245,82,37)" fg:x="2351" fg:w="5"/><text x="95.7158%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="95.7265%" y="213" width="0.1628%" height="15" fill="rgb(227,149,46)" fg:x="2352" fg:w="4"/><text x="95.7565%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="95.7265%" y="197" width="0.1628%" height="15" fill="rgb(218,36,50)" fg:x="2352" fg:w="4"/><text x="95.7565%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="95.7265%" y="181" width="0.1628%" height="15" fill="rgb(226,80,48)" fg:x="2352" fg:w="4"/><text x="95.7565%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="95.7265%" y="165" width="0.1628%" height="15" fill="rgb(238,224,15)" fg:x="2352" fg:w="4"/><text x="95.7565%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="95.7265%" y="149" width="0.1628%" height="15" fill="rgb(241,136,10)" fg:x="2352" fg:w="4"/><text x="95.7565%" y="159.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="95.8893%" y="405" width="0.0407%" height="15" fill="rgb(208,32,45)" fg:x="2356" fg:w="1"/><text x="95.9193%" y="415.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="95.8893%" y="389" width="0.0407%" height="15" fill="rgb(207,135,9)" fg:x="2356" fg:w="1"/><text x="95.9193%" y="399.50"></text></g><g><title>santa_solver::ktt_solver::solve_puzzles (457 samples, 18.60%)</title><rect x="77.3708%" y="453" width="18.5999%" height="15" fill="rgb(206,86,44)" fg:x="1901" fg:w="457"/><text x="77.4008%" y="463.50">santa_solver::ktt_solver::solve_puzzles</text></g><g><title>santa_solver::kalka_teicher_tsaban::factorize (456 samples, 18.56%)</title><rect x="77.4115%" y="437" width="18.5592%" height="15" fill="rgb(245,177,15)" fg:x="1902" fg:w="456"/><text x="77.4415%" y="447.50">santa_solver::kalka_teicher_tsaban::factorize</text></g><g><title>santa_solver::permutation::Permutation::pow (179 samples, 7.29%)</title><rect x="88.6854%" y="421" width="7.2853%" height="15" fill="rgb(206,64,50)" fg:x="2179" fg:w="179"/><text x="88.7154%" y="431.50">santa_solver::permutation::Permutation::pow</text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="95.9300%" y="405" width="0.0407%" height="15" fill="rgb(234,36,40)" fg:x="2357" fg:w="1"/><text x="95.9600%" y="415.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="95.9300%" y="389" width="0.0407%" height="15" fill="rgb(213,64,8)" fg:x="2357" fg:w="1"/><text x="95.9600%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="389" width="0.0407%" height="15" fill="rgb(210,75,36)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="373" width="0.0407%" height="15" fill="rgb(229,88,21)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="357" width="0.0407%" height="15" fill="rgb(252,204,47)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="341" width="0.0407%" height="15" fill="rgb(208,77,27)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="325" width="0.0407%" height="15" fill="rgb(221,76,26)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="309" width="0.0407%" height="15" fill="rgb(225,139,18)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="293" width="0.0407%" height="15" fill="rgb(230,137,11)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="277" width="0.0407%" height="15" fill="rgb(212,28,1)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="261" width="0.0407%" height="15" fill="rgb(248,164,17)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="245" width="0.0407%" height="15" fill="rgb(222,171,42)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="229" width="0.0407%" height="15" fill="rgb(243,84,45)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.0928%" y="213" width="0.0407%" height="15" fill="rgb(252,49,23)" fg:x="2361" fg:w="1"/><text x="96.1228%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1335%" y="373" width="0.0407%" height="15" fill="rgb(215,19,7)" fg:x="2362" fg:w="1"/><text x="96.1635%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1335%" y="357" width="0.0407%" height="15" fill="rgb(238,81,41)" fg:x="2362" fg:w="1"/><text x="96.1635%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1335%" y="341" width="0.0407%" height="15" fill="rgb(210,199,37)" fg:x="2362" fg:w="1"/><text x="96.1635%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1335%" y="325" width="0.0407%" height="15" fill="rgb(244,192,49)" fg:x="2362" fg:w="1"/><text x="96.1635%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1335%" y="309" width="0.0407%" height="15" fill="rgb(226,211,11)" fg:x="2362" fg:w="1"/><text x="96.1635%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1335%" y="293" width="0.0407%" height="15" fill="rgb(236,162,54)" fg:x="2362" fg:w="1"/><text x="96.1635%" y="303.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.12%)</title><rect x="96.0928%" y="421" width="0.1221%" height="15" fill="rgb(220,229,9)" fg:x="2361" fg:w="3"/><text x="96.1228%" y="431.50"></text></g><g><title>_int_malloc (3 samples, 0.12%)</title><rect x="96.0928%" y="405" width="0.1221%" height="15" fill="rgb(250,87,22)" fg:x="2361" fg:w="3"/><text x="96.1228%" y="415.50"></text></g><g><title>sysmalloc (2 samples, 0.08%)</title><rect x="96.1335%" y="389" width="0.0814%" height="15" fill="rgb(239,43,17)" fg:x="2362" fg:w="2"/><text x="96.1635%" y="399.50"></text></g><g><title>__glibc_morecore (1 samples, 0.04%)</title><rect x="96.1742%" y="373" width="0.0407%" height="15" fill="rgb(231,177,25)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="383.50"></text></g><g><title>__GI___sbrk (1 samples, 0.04%)</title><rect x="96.1742%" y="357" width="0.0407%" height="15" fill="rgb(219,179,1)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="367.50"></text></g><g><title>__GI___sbrk (1 samples, 0.04%)</title><rect x="96.1742%" y="341" width="0.0407%" height="15" fill="rgb(238,219,53)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="351.50"></text></g><g><title>__brk (1 samples, 0.04%)</title><rect x="96.1742%" y="325" width="0.0407%" height="15" fill="rgb(232,167,36)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="309" width="0.0407%" height="15" fill="rgb(244,19,51)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="293" width="0.0407%" height="15" fill="rgb(224,6,22)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="277" width="0.0407%" height="15" fill="rgb(224,145,5)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="261" width="0.0407%" height="15" fill="rgb(234,130,49)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="245" width="0.0407%" height="15" fill="rgb(254,6,2)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="229" width="0.0407%" height="15" fill="rgb(208,96,46)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="213" width="0.0407%" height="15" fill="rgb(239,3,39)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="197" width="0.0407%" height="15" fill="rgb(233,210,1)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="181" width="0.0407%" height="15" fill="rgb(244,137,37)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.1742%" y="165" width="0.0407%" height="15" fill="rgb(240,136,2)" fg:x="2363" fg:w="1"/><text x="96.2042%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.61%)</title><rect x="96.0928%" y="437" width="0.6105%" height="15" fill="rgb(239,18,37)" fg:x="2361" fg:w="15"/><text x="96.1228%" y="447.50">&lt;alloc..</text></g><g><title>__memcpy_avx_unaligned_erms (12 samples, 0.49%)</title><rect x="96.2149%" y="421" width="0.4884%" height="15" fill="rgb(218,185,22)" fg:x="2364" fg:w="12"/><text x="96.2449%" y="431.50">__me..</text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="96.4998%" y="405" width="0.2035%" height="15" fill="rgb(225,218,4)" fg:x="2371" fg:w="5"/><text x="96.5298%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="96.4998%" y="389" width="0.2035%" height="15" fill="rgb(230,182,32)" fg:x="2371" fg:w="5"/><text x="96.5298%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="96.4998%" y="373" width="0.2035%" height="15" fill="rgb(242,56,43)" fg:x="2371" fg:w="5"/><text x="96.5298%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="96.4998%" y="357" width="0.2035%" height="15" fill="rgb(233,99,24)" fg:x="2371" fg:w="5"/><text x="96.5298%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="96.4998%" y="341" width="0.2035%" height="15" fill="rgb(234,209,42)" fg:x="2371" fg:w="5"/><text x="96.5298%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="96.4998%" y="325" width="0.2035%" height="15" fill="rgb(227,7,12)" fg:x="2371" fg:w="5"/><text x="96.5298%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="96.4998%" y="309" width="0.2035%" height="15" fill="rgb(245,203,43)" fg:x="2371" fg:w="5"/><text x="96.5298%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.20%)</title><rect x="96.4998%" y="293" width="0.2035%" height="15" fill="rgb(238,205,33)" fg:x="2371" fg:w="5"/><text x="96.5298%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.12%)</title><rect x="96.5812%" y="277" width="0.1221%" height="15" fill="rgb(231,56,7)" fg:x="2373" fg:w="3"/><text x="96.6112%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.12%)</title><rect x="96.5812%" y="261" width="0.1221%" height="15" fill="rgb(244,186,29)" fg:x="2373" fg:w="3"/><text x="96.6112%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="96.6219%" y="245" width="0.0814%" height="15" fill="rgb(234,111,31)" fg:x="2374" fg:w="2"/><text x="96.6519%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="96.6219%" y="229" width="0.0814%" height="15" fill="rgb(241,149,10)" fg:x="2374" fg:w="2"/><text x="96.6519%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.04%)</title><rect x="96.7033%" y="421" width="0.0407%" height="15" fill="rgb(249,206,44)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="431.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.04%)</title><rect x="96.7033%" y="405" width="0.0407%" height="15" fill="rgb(251,153,30)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="415.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (1 samples, 0.04%)</title><rect x="96.7033%" y="389" width="0.0407%" height="15" fill="rgb(239,152,38)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="399.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (1 samples, 0.04%)</title><rect x="96.7033%" y="373" width="0.0407%" height="15" fill="rgb(249,139,47)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="383.50"></text></g><g><title>__GI___libc_read (1 samples, 0.04%)</title><rect x="96.7033%" y="357" width="0.0407%" height="15" fill="rgb(244,64,35)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="341" width="0.0407%" height="15" fill="rgb(216,46,15)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="325" width="0.0407%" height="15" fill="rgb(250,74,19)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="309" width="0.0407%" height="15" fill="rgb(249,42,33)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="293" width="0.0407%" height="15" fill="rgb(242,149,17)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="277" width="0.0407%" height="15" fill="rgb(244,29,21)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="261" width="0.0407%" height="15" fill="rgb(220,130,37)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="245" width="0.0407%" height="15" fill="rgb(211,67,2)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="229" width="0.0407%" height="15" fill="rgb(235,68,52)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="213" width="0.0407%" height="15" fill="rgb(246,142,3)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7033%" y="197" width="0.0407%" height="15" fill="rgb(241,25,7)" fg:x="2376" fg:w="1"/><text x="96.7333%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="96.7440%" y="421" width="0.0407%" height="15" fill="rgb(242,119,39)" fg:x="2377" fg:w="1"/><text x="96.7740%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7440%" y="405" width="0.0407%" height="15" fill="rgb(241,98,45)" fg:x="2377" fg:w="1"/><text x="96.7740%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7440%" y="389" width="0.0407%" height="15" fill="rgb(254,28,30)" fg:x="2377" fg:w="1"/><text x="96.7740%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7440%" y="373" width="0.0407%" height="15" fill="rgb(241,142,54)" fg:x="2377" fg:w="1"/><text x="96.7740%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7440%" y="357" width="0.0407%" height="15" fill="rgb(222,85,15)" fg:x="2377" fg:w="1"/><text x="96.7740%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="96.7440%" y="341" width="0.0407%" height="15" fill="rgb(210,85,47)" fg:x="2377" fg:w="1"/><text x="96.7740%" y="351.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.33%)</title><rect x="96.7033%" y="437" width="0.3256%" height="15" fill="rgb(224,206,25)" fg:x="2376" fg:w="8"/><text x="96.7333%" y="447.50">&lt;c..</text></g><g><title>csv_core::reader::Reader::read_record (6 samples, 0.24%)</title><rect x="96.7847%" y="421" width="0.2442%" height="15" fill="rgb(243,201,19)" fg:x="2378" fg:w="6"/><text x="96.8147%" y="431.50">c..</text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="97.0289%" y="437" width="0.0407%" height="15" fill="rgb(236,59,4)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="421" width="0.0407%" height="15" fill="rgb(254,179,45)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="405" width="0.0407%" height="15" fill="rgb(226,14,10)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="389" width="0.0407%" height="15" fill="rgb(244,27,41)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="373" width="0.0407%" height="15" fill="rgb(235,35,32)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="357" width="0.0407%" height="15" fill="rgb(218,68,31)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="341" width="0.0407%" height="15" fill="rgb(207,120,37)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="325" width="0.0407%" height="15" fill="rgb(227,98,0)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="309" width="0.0407%" height="15" fill="rgb(207,7,3)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="293" width="0.0407%" height="15" fill="rgb(206,98,19)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.0289%" y="277" width="0.0407%" height="15" fill="rgb(217,5,26)" fg:x="2384" fg:w="1"/><text x="97.0589%" y="287.50"></text></g><g><title>santa_solver::puzzle::state_from_str (1 samples, 0.04%)</title><rect x="97.0696%" y="437" width="0.0407%" height="15" fill="rgb(235,190,38)" fg:x="2385" fg:w="1"/><text x="97.0996%" y="447.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="97.1103%" y="389" width="0.0407%" height="15" fill="rgb(247,86,24)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="399.50"></text></g><g><title>__GI___munmap (1 samples, 0.04%)</title><rect x="97.1103%" y="373" width="0.0407%" height="15" fill="rgb(205,101,16)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="357" width="0.0407%" height="15" fill="rgb(246,168,33)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="341" width="0.0407%" height="15" fill="rgb(231,114,1)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="325" width="0.0407%" height="15" fill="rgb(207,184,53)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="309" width="0.0407%" height="15" fill="rgb(224,95,51)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="293" width="0.0407%" height="15" fill="rgb(212,188,45)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="277" width="0.0407%" height="15" fill="rgb(223,154,38)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="261" width="0.0407%" height="15" fill="rgb(251,22,52)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="245" width="0.0407%" height="15" fill="rgb(229,209,22)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="229" width="0.0407%" height="15" fill="rgb(234,138,34)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="213" width="0.0407%" height="15" fill="rgb(212,95,11)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="197" width="0.0407%" height="15" fill="rgb(240,179,47)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.1103%" y="181" width="0.0407%" height="15" fill="rgb(240,163,11)" fg:x="2386" fg:w="1"/><text x="97.1403%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.08%)</title><rect x="97.1103%" y="405" width="0.0814%" height="15" fill="rgb(236,37,12)" fg:x="2386" fg:w="2"/><text x="97.1403%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.04%)</title><rect x="97.1510%" y="389" width="0.0407%" height="15" fill="rgb(232,164,16)" fg:x="2387" fg:w="1"/><text x="97.1810%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.04%)</title><rect x="97.1510%" y="373" width="0.0407%" height="15" fill="rgb(244,205,15)" fg:x="2387" fg:w="1"/><text x="97.1810%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.2324%" y="357" width="0.0407%" height="15" fill="rgb(223,117,47)" fg:x="2389" fg:w="1"/><text x="97.2624%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.2324%" y="341" width="0.0407%" height="15" fill="rgb(244,107,35)" fg:x="2389" fg:w="1"/><text x="97.2624%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.2324%" y="325" width="0.0407%" height="15" fill="rgb(205,140,8)" fg:x="2389" fg:w="1"/><text x="97.2624%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.2324%" y="309" width="0.0407%" height="15" fill="rgb(228,84,46)" fg:x="2389" fg:w="1"/><text x="97.2624%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.2324%" y="293" width="0.0407%" height="15" fill="rgb(254,188,9)" fg:x="2389" fg:w="1"/><text x="97.2624%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.2324%" y="277" width="0.0407%" height="15" fill="rgb(206,112,54)" fg:x="2389" fg:w="1"/><text x="97.2624%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.2324%" y="261" width="0.0407%" height="15" fill="rgb(216,84,49)" fg:x="2389" fg:w="1"/><text x="97.2624%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.2324%" y="245" width="0.0407%" height="15" fill="rgb(214,194,35)" fg:x="2389" fg:w="1"/><text x="97.2624%" y="255.50"></text></g><g><title>&lt;serde::__private::de::FlatMapDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_map (3 samples, 0.12%)</title><rect x="97.1917%" y="405" width="0.1221%" height="15" fill="rgb(249,28,3)" fg:x="2388" fg:w="3"/><text x="97.2217%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_seq (3 samples, 0.12%)</title><rect x="97.1917%" y="389" width="0.1221%" height="15" fill="rgb(222,56,52)" fg:x="2388" fg:w="3"/><text x="97.2217%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.12%)</title><rect x="97.1917%" y="373" width="0.1221%" height="15" fill="rgb(245,217,50)" fg:x="2388" fg:w="3"/><text x="97.2217%" y="383.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="97.2731%" y="357" width="0.0407%" height="15" fill="rgb(213,201,24)" fg:x="2390" fg:w="1"/><text x="97.3031%" y="367.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="97.2731%" y="341" width="0.0407%" height="15" fill="rgb(248,116,28)" fg:x="2390" fg:w="1"/><text x="97.3031%" y="351.50"></text></g><g><title>sysmalloc (1 samples, 0.04%)</title><rect x="97.2731%" y="325" width="0.0407%" height="15" fill="rgb(219,72,43)" fg:x="2390" fg:w="1"/><text x="97.3031%" y="335.50"></text></g><g><title>__glibc_morecore (1 samples, 0.04%)</title><rect x="97.2731%" y="309" width="0.0407%" height="15" fill="rgb(209,138,14)" fg:x="2390" fg:w="1"/><text x="97.3031%" y="319.50"></text></g><g><title>__GI___sbrk (1 samples, 0.04%)</title><rect x="97.2731%" y="293" width="0.0407%" height="15" fill="rgb(222,18,33)" fg:x="2390" fg:w="1"/><text x="97.3031%" y="303.50"></text></g><g><title>__GI___sbrk (1 samples, 0.04%)</title><rect x="97.2731%" y="277" width="0.0407%" height="15" fill="rgb(213,199,7)" fg:x="2390" fg:w="1"/><text x="97.3031%" y="287.50"></text></g><g><title>__brk (1 samples, 0.04%)</title><rect x="97.2731%" y="261" width="0.0407%" height="15" fill="rgb(250,110,10)" fg:x="2390" fg:w="1"/><text x="97.3031%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.2731%" y="245" width="0.0407%" height="15" fill="rgb(248,123,6)" fg:x="2390" fg:w="1"/><text x="97.3031%" y="255.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.16%)</title><rect x="97.4766%" y="373" width="0.1628%" height="15" fill="rgb(206,91,31)" fg:x="2395" fg:w="4"/><text x="97.5066%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.6394%" y="373" width="0.0407%" height="15" fill="rgb(211,154,13)" fg:x="2399" fg:w="1"/><text x="97.6694%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.6394%" y="357" width="0.0407%" height="15" fill="rgb(225,148,7)" fg:x="2399" fg:w="1"/><text x="97.6694%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.6394%" y="341" width="0.0407%" height="15" fill="rgb(220,160,43)" fg:x="2399" fg:w="1"/><text x="97.6694%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.6394%" y="325" width="0.0407%" height="15" fill="rgb(213,52,39)" fg:x="2399" fg:w="1"/><text x="97.6694%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.6394%" y="309" width="0.0407%" height="15" fill="rgb(243,137,7)" fg:x="2399" fg:w="1"/><text x="97.6694%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.6394%" y="293" width="0.0407%" height="15" fill="rgb(230,79,13)" fg:x="2399" fg:w="1"/><text x="97.6694%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.16%)</title><rect x="97.6801%" y="309" width="0.1628%" height="15" fill="rgb(247,105,23)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="97.6801%" y="293" width="0.1628%" height="15" fill="rgb(223,179,41)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="97.6801%" y="277" width="0.1628%" height="15" fill="rgb(218,9,34)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="97.6801%" y="261" width="0.1628%" height="15" fill="rgb(222,106,8)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="97.6801%" y="245" width="0.1628%" height="15" fill="rgb(211,220,0)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="97.6801%" y="229" width="0.1628%" height="15" fill="rgb(229,52,16)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="97.6801%" y="213" width="0.1628%" height="15" fill="rgb(212,155,18)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="97.6801%" y="197" width="0.1628%" height="15" fill="rgb(242,21,14)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="97.6801%" y="181" width="0.1628%" height="15" fill="rgb(222,19,48)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.16%)</title><rect x="97.6801%" y="165" width="0.1628%" height="15" fill="rgb(232,45,27)" fg:x="2400" fg:w="4"/><text x="97.7101%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.12%)</title><rect x="97.7208%" y="149" width="0.1221%" height="15" fill="rgb(249,103,42)" fg:x="2401" fg:w="3"/><text x="97.7508%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="97.7615%" y="133" width="0.0814%" height="15" fill="rgb(246,81,33)" fg:x="2402" fg:w="2"/><text x="97.7915%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.08%)</title><rect x="97.7615%" y="117" width="0.0814%" height="15" fill="rgb(252,33,42)" fg:x="2402" fg:w="2"/><text x="97.7915%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (14 samples, 0.57%)</title><rect x="97.3138%" y="389" width="0.5698%" height="15" fill="rgb(209,212,41)" fg:x="2391" fg:w="14"/><text x="97.3438%" y="399.50">&lt;serde..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.20%)</title><rect x="97.6801%" y="373" width="0.2035%" height="15" fill="rgb(207,154,6)" fg:x="2400" fg:w="5"/><text x="97.7101%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.20%)</title><rect x="97.6801%" y="357" width="0.2035%" height="15" fill="rgb(223,64,47)" fg:x="2400" fg:w="5"/><text x="97.7101%" y="367.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.20%)</title><rect x="97.6801%" y="341" width="0.2035%" height="15" fill="rgb(211,161,38)" fg:x="2400" fg:w="5"/><text x="97.7101%" y="351.50"></text></g><g><title>_int_realloc (5 samples, 0.20%)</title><rect x="97.6801%" y="325" width="0.2035%" height="15" fill="rgb(219,138,40)" fg:x="2400" fg:w="5"/><text x="97.7101%" y="335.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="97.8429%" y="309" width="0.0407%" height="15" fill="rgb(241,228,46)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="319.50"></text></g><g><title>sysmalloc (1 samples, 0.04%)</title><rect x="97.8429%" y="293" width="0.0407%" height="15" fill="rgb(223,209,38)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="303.50"></text></g><g><title>sysmalloc_mmap (1 samples, 0.04%)</title><rect x="97.8429%" y="277" width="0.0407%" height="15" fill="rgb(236,164,45)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="287.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.04%)</title><rect x="97.8429%" y="261" width="0.0407%" height="15" fill="rgb(231,15,5)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="271.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.04%)</title><rect x="97.8429%" y="245" width="0.0407%" height="15" fill="rgb(252,35,15)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="229" width="0.0407%" height="15" fill="rgb(248,181,18)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="213" width="0.0407%" height="15" fill="rgb(233,39,42)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="197" width="0.0407%" height="15" fill="rgb(238,110,33)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="181" width="0.0407%" height="15" fill="rgb(233,195,10)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="165" width="0.0407%" height="15" fill="rgb(254,105,3)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="149" width="0.0407%" height="15" fill="rgb(221,225,9)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="133" width="0.0407%" height="15" fill="rgb(224,227,45)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="117" width="0.0407%" height="15" fill="rgb(229,198,43)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="101" width="0.0407%" height="15" fill="rgb(206,209,35)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="85" width="0.0407%" height="15" fill="rgb(245,195,53)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="69" width="0.0407%" height="15" fill="rgb(240,92,26)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="53" width="0.0407%" height="15" fill="rgb(207,40,23)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="97.8429%" y="37" width="0.0407%" height="15" fill="rgb(223,111,35)" fg:x="2404" fg:w="1"/><text x="97.8729%" y="47.50"></text></g><g><title>__libc_start_main_impl (506 samples, 20.59%)</title><rect x="77.3708%" y="693" width="20.5942%" height="15" fill="rgb(229,147,28)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="703.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (506 samples, 20.59%)</title><rect x="77.3708%" y="677" width="20.5942%" height="15" fill="rgb(211,29,28)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="687.50">__libc_start_call_main</text></g><g><title>std::rt::lang_start (506 samples, 20.59%)</title><rect x="77.3708%" y="661" width="20.5942%" height="15" fill="rgb(228,72,33)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="671.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (506 samples, 20.59%)</title><rect x="77.3708%" y="645" width="20.5942%" height="15" fill="rgb(205,214,31)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (506 samples, 20.59%)</title><rect x="77.3708%" y="629" width="20.5942%" height="15" fill="rgb(224,111,15)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (506 samples, 20.59%)</title><rect x="77.3708%" y="613" width="20.5942%" height="15" fill="rgb(253,21,26)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (506 samples, 20.59%)</title><rect x="77.3708%" y="597" width="20.5942%" height="15" fill="rgb(245,139,43)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (506 samples, 20.59%)</title><rect x="77.3708%" y="581" width="20.5942%" height="15" fill="rgb(252,170,7)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (506 samples, 20.59%)</title><rect x="77.3708%" y="565" width="20.5942%" height="15" fill="rgb(231,118,14)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (506 samples, 20.59%)</title><rect x="77.3708%" y="549" width="20.5942%" height="15" fill="rgb(238,83,0)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (506 samples, 20.59%)</title><rect x="77.3708%" y="533" width="20.5942%" height="15" fill="rgb(221,39,39)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (506 samples, 20.59%)</title><rect x="77.3708%" y="517" width="20.5942%" height="15" fill="rgb(222,119,46)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (506 samples, 20.59%)</title><rect x="77.3708%" y="501" width="20.5942%" height="15" fill="rgb(222,165,49)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (506 samples, 20.59%)</title><rect x="77.3708%" y="485" width="20.5942%" height="15" fill="rgb(219,113,52)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>santa_solver::main (506 samples, 20.59%)</title><rect x="77.3708%" y="469" width="20.5942%" height="15" fill="rgb(214,7,15)" fg:x="1901" fg:w="506"/><text x="77.4008%" y="479.50">santa_solver::main</text></g><g><title>santa_solver::puzzle::load_puzzles (49 samples, 1.99%)</title><rect x="95.9707%" y="453" width="1.9943%" height="15" fill="rgb(235,32,4)" fg:x="2358" fg:w="49"/><text x="96.0007%" y="463.50">santa_solver::puzzle::load..</text></g><g><title>serde_json::de::from_trait (21 samples, 0.85%)</title><rect x="97.1103%" y="437" width="0.8547%" height="15" fill="rgb(238,90,54)" fg:x="2386" fg:w="21"/><text x="97.1403%" y="447.50">serde_json..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (21 samples, 0.85%)</title><rect x="97.1103%" y="421" width="0.8547%" height="15" fill="rgb(213,208,19)" fg:x="2386" fg:w="21"/><text x="97.1403%" y="431.50">&lt;&amp;mut serd..</text></g><g><title>serde::de::Deserializer::__deserialize_content (16 samples, 0.65%)</title><rect x="97.3138%" y="405" width="0.6512%" height="15" fill="rgb(233,156,4)" fg:x="2391" fg:w="16"/><text x="97.3438%" y="415.50">serde::..</text></g><g><title>serde::de::Deserializer::__deserialize_content (2 samples, 0.08%)</title><rect x="97.8836%" y="389" width="0.0814%" height="15" fill="rgb(207,194,5)" fg:x="2405" fg:w="2"/><text x="97.9136%" y="399.50"></text></g><g><title>_start (507 samples, 20.63%)</title><rect x="77.3708%" y="709" width="20.6349%" height="15" fill="rgb(206,111,30)" fg:x="1901" fg:w="507"/><text x="77.4008%" y="719.50">_start</text></g><g><title>_dl_start (1 samples, 0.04%)</title><rect x="97.9650%" y="693" width="0.0407%" height="15" fill="rgb(243,70,54)" fg:x="2407" fg:w="1"/><text x="97.9950%" y="703.50"></text></g><g><title>_dl_start_final (1 samples, 0.04%)</title><rect x="97.9650%" y="677" width="0.0407%" height="15" fill="rgb(242,28,8)" fg:x="2407" fg:w="1"/><text x="97.9950%" y="687.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="97.9650%" y="661" width="0.0407%" height="15" fill="rgb(219,106,18)" fg:x="2407" fg:w="1"/><text x="97.9950%" y="671.50"></text></g><g><title>dl_main (1 samples, 0.04%)</title><rect x="97.9650%" y="645" width="0.0407%" height="15" fill="rgb(244,222,10)" fg:x="2407" fg:w="1"/><text x="97.9950%" y="655.50"></text></g><g><title>_dl_receive_error (1 samples, 0.04%)</title><rect x="97.9650%" y="629" width="0.0407%" height="15" fill="rgb(236,179,52)" fg:x="2407" fg:w="1"/><text x="97.9950%" y="639.50"></text></g><g><title>version_check_doit (1 samples, 0.04%)</title><rect x="97.9650%" y="613" width="0.0407%" height="15" fill="rgb(213,23,39)" fg:x="2407" fg:w="1"/><text x="97.9950%" y="623.50"></text></g><g><title>memmove (1 samples, 0.04%)</title><rect x="97.9650%" y="597" width="0.0407%" height="15" fill="rgb(238,48,10)" fg:x="2407" fg:w="1"/><text x="97.9950%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.08%)</title><rect x="98.0057%" y="709" width="0.0814%" height="15" fill="rgb(251,196,23)" fg:x="2408" fg:w="2"/><text x="98.0357%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.12%)</title><rect x="98.0871%" y="709" width="0.1221%" height="15" fill="rgb(250,152,24)" fg:x="2410" fg:w="3"/><text x="98.1171%" y="719.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="98.2092%" y="693" width="0.0407%" height="15" fill="rgb(209,150,17)" fg:x="2413" fg:w="1"/><text x="98.2392%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.08%)</title><rect x="98.2499%" y="693" width="0.0814%" height="15" fill="rgb(234,202,34)" fg:x="2414" fg:w="2"/><text x="98.2799%" y="703.50"></text></g><g><title>_int_malloc (2 samples, 0.08%)</title><rect x="98.3313%" y="693" width="0.0814%" height="15" fill="rgb(253,148,53)" fg:x="2416" fg:w="2"/><text x="98.3613%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.08%)</title><rect x="98.4127%" y="693" width="0.0814%" height="15" fill="rgb(218,129,16)" fg:x="2418" fg:w="2"/><text x="98.4427%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.16%)</title><rect x="98.4941%" y="693" width="0.1628%" height="15" fill="rgb(216,85,19)" fg:x="2420" fg:w="4"/><text x="98.5241%" y="703.50"></text></g><g><title>main_arena (12 samples, 0.49%)</title><rect x="98.2092%" y="709" width="0.4884%" height="15" fill="rgb(235,228,7)" fg:x="2413" fg:w="12"/><text x="98.2392%" y="719.50">main..</text></g><g><title>unlink_chunk (1 samples, 0.04%)</title><rect x="98.6569%" y="693" width="0.0407%" height="15" fill="rgb(245,175,0)" fg:x="2424" fg:w="1"/><text x="98.6869%" y="703.50"></text></g><g><title>malloc_consolidate (1 samples, 0.04%)</title><rect x="98.6976%" y="709" width="0.0407%" height="15" fill="rgb(208,168,36)" fg:x="2425" fg:w="1"/><text x="98.7276%" y="719.50"></text></g><g><title>santa_solver::permutation::Permutation::compute_info (3 samples, 0.12%)</title><rect x="98.7383%" y="709" width="0.1221%" height="15" fill="rgb(246,171,24)" fg:x="2426" fg:w="3"/><text x="98.7683%" y="719.50"></text></g><g><title>all (2,457 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(215,142,24)" fg:x="0" fg:w="2457"/><text x="0.0300%" y="751.50"></text></g><g><title>santa-solver (2,451 samples, 99.76%)</title><rect x="0.2442%" y="725" width="99.7558%" height="15" fill="rgb(250,187,7)" fg:x="6" fg:w="2451"/><text x="0.2742%" y="735.50">santa-solver</text></g><g><title>santa_solver::permutation::Permutation::pow (28 samples, 1.14%)</title><rect x="98.8604%" y="709" width="1.1396%" height="15" fill="rgb(228,66,33)" fg:x="2429" fg:w="28"/><text x="98.8904%" y="719.50">santa_solver::..</text></g></svg></svg>